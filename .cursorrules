This is a NextJS 15 / React 19 / Typescript / Tailwind CSS application with Jest and Cypress test frameworks.


#internal Cursor tools used
codebase_search - For semantic search in the codebase
read_file - For reading file contents
run_terminal_cmd - For running terminal commands
list_dir - For listing directory contents
grep_search - For text-based regex search
file_search - For fuzzy file path search
delete_file - For deleting files


#Project specific tools, please run as commands with tool defined in tool-attribute
{
  "tools": {
    "recraft": {
      "description": "Generates images using Recraft V3 API (SOTA text-to-image model)",
      "tool": "run_terminal_cmd",
      "command": "npm run recraft",
      "options": {
        "prompt": "Text description of the desired image",
        "style": "(Optional) Image style to use (default: digital_illustration). Available styles:\n
        - realistic_image (and variants: b_and_w, hard_flash, hdr, natural_light, studio_portrait, enterprise, motion_blur)\n
        - digital_illustration (and variants: pixel_art, hand_drawn, grain, infantile_sketch, 2d_art_poster, handmade_3d, hand_drawn_outline, engraving_color, 2d_art_poster_2)",
        "negative_prompt": "(Optional) Things to avoid in the image",
        "width": "(Optional) Image width in pixels. Available sizes: 1024, 1365, 1536, 1820, 2048, 1434, 1280, 1707 (default: 1024)",
        "height": "(Optional) Image height in pixels. Available sizes: 1024, 1365, 1536, 1820, 2048, 1434, 1280, 1707 (default: 1024)",
        "num_outputs": "(Optional) Number of images to generate (default: 1)",
        "scheduler": "(Optional) Sampling method to use",
        "num_inference_steps": "(Optional) Number of denoising steps (default: 50)",
        "guidance_scale": "(Optional) How closely to follow the prompt (default: 7.5)",
        "seed": "(Optional) Random seed for reproducibility",
        "folder": "(Optional) Output folder path",
        "filename": "(Optional) Output filename"
      },
      "requires": ["REPLICATE_API_TOKEN in .env"],
      "example": "npm run recraft -- --prompt \"A modern logo with blue background\" --style digital_illustration --folder public/images --filename logo.png"
    },
    "image-optimizer": {
      "description": "Optimizes images with background removal, resizing, and format conversion",
      "tool": "run_terminal_cmd",
      "command": "npm run optimize-image",
      "options": {
        "input": "Path to input image",
        "output": "Path to output image",
        "remove-bg": "(Optional) Remove image background using AI",
        "resize": "(Optional) Resize image (format: WIDTHxHEIGHT, e.g. 800x600)",
        "format": "(Optional) Convert to format (png, jpeg, or webp)",
        "quality": "(Optional) Set output quality (1-100, default: 80)"
      },
      "requires": [
        "REPLICATE_API_TOKEN in .env",
        "sharp package (npm install sharp)"
      ],
      "example": "npm run optimize-image -- input.png output.webp --resize 512x512 --format webp --quality 90"
    },
    "read-url": {
      "description": "Scrapes a webpage and converts its HTML content to Markdown format",
      "tool": "run_terminal_cmd",
      "command": "npm run html-to-md",
      "options": {
        "url": "URL of the webpage to scrape",
        "output": "(Optional) Output file path for the markdown (default: output.md)",
        "selector": "(Optional) CSS selector to target specific content"
      },
      "requires": [
        "Node.js >= 14",
        "Internet connection for scraping"
      ],
      "example": "npm run html-to-md -- --url https://example.com --output docs/scraped.md --selector main"
    },
    "tavily-search": {
      "description": "Executes AI-powered web search using Tavily API with options for search type, depth, and domain filtering",
       "tool": "run_terminal_cmd",
      "command": "npm run tavily-search",
      "options": {
        "query": "Search query text",
        "type": "(Optional) Search type: 'search' (default), 'context', or 'qna' for question and answer",
        "depth": "(Optional) Search depth: 'basic' (default) or 'advanced'",
        "max-results": "(Optional) Maximum number of results (default: 5)",
        "include": "(Optional) Comma-separated list of domains to include",
        "exclude": "(Optional) Comma-separated list of domains to exclude"
      },
      "requires": [
        "TAVILY_API_KEY in .env",
        "@tavily/core package"
      ],
      "example": "npm run tavily-search -- --query \"Next.js best practices\" --type context --depth advanced --max-results 10"
    },
    "download-file": {
      "description": "Downloads files (especially images) from URLs with progress tracking",
      "tool": "run_terminal_cmd",
      "command": "npm run download-file",
      "options": {
        "url": "URL of the file to download",
        "output": "(Optional) Complete output path including filename",
        "folder": "(Optional) Output folder path (default: downloads)",
        "filename": "(Optional) Output filename (if not provided, derived from URL or content)"
      },
      "requires": [
        "axios package",
        "Internet connection"
      ],
      "example": "npm run download-file -- --url https://example.com/image.jpg --folder public/images --filename downloaded-image.jpg"
    }
  }
}


#Agent rules
1. The system is documented in the docs folder under following documents. Please before performing any task, scan and read ALL the needed docs to plan the task. Keep them up to date according to my input and feedback.
   1.1 description.md:
       - Provide concise description of the app or system idea
       - Document core use cases and features
   2.2 architecture.md:
       - Define full technical stack (frontend/backend frameworks, databases, testing frameworks)
       - Folder structure
   3.3 datamodel.md:
       - Document all entities, attributes and relationships in a concise way
   4.4 frontend.md:
       - List and describe all views/screens
       - Define UI/UX patterns and styling approach
   5.5 backend.md:
       - Document all API endpoints and authentication
       - Define service architecture and components
   6.6 todo.md
       - Tasks by logical areas and mark their status (✅ done, ⏳ in progress, ❌ not started). Next priority tasks in the end.
       - Prefer full stack tasks.
   6.7 ai_changelog.md
       - Changelog of changes done
   6.8 learnings.md
       - Consise technical learnings and best practices discovered during development
       - Solutions to occurred errors, including potential links

2. After reading all the needed docs, always perform first a comprehensive study and chain of thought reasoning of what to do.
  2.1 Always consider the end-to-end implementation, think changes needed for UI, API queries, backend and database.
  2.2 Search the codebase for relevant files and methods first for getting context. Don't make assumptions.
  2.3 If you are planning to use an API or library, first search the web using Tavily tool for up-to-date documentation and getting started.
  2.4 Consider correct folder and files on where to implement changes. Read @architecture.md for folder structure.
  2.5 After you have all the context, perform chain of thoughts using this format:
    1. "Reading required files..."
    2. "Analysis: what I found in the files..."
    3. "Plan: what needs to be done, what tools I need..."
    4. "Need more info: what more do I need to know..."
    5. "Implementation: how I'll do it..."
  2.6 If you need more information or clarifications, please ask me before proceeding with the implementation

3. If tools returns an error or I refer to an error, please use following steps for resolving them
  3.1 First read learnings.md from the docs folder if you have an ready solutions for this
  3.2 If the error contains a link to web page explaining the error, please read the url
  3.2 Then search the web using web search for the quick error resolutions.
  3.3 Perform chain of thoughts reasoning for the cause and potential fixes for the error
  3.4 Fix and validate the error
  3.5 Document the error resolution to learnings.md, including any links that you found usable.


4. Always follow my instructions on what to do and perform next. Perform only actions in the following list.
  4.1 When I ask to research:
   - perform full research using web search about how to implement task in current version framework.
   - perform above tasks 1 and 2 for reading the documents and performing the study
   - write a summary of what do to

  4.2. When I say implement:
  - perform above tasks 1 and 2 for reading the documents and performing the study
  - implement the code and unit tests for it using the process defined above.
  - if images are needed in the implementation, create images to public folder with descriptive names and optimise them
  - run unit and e2e tests

  4.2  When I say validate, please review and validate the code for correctness and execute the unit tests for it. If you don't have unit tests, please create them.
  4.3. When I say record, write summary of what you did in the ai_changelog.md and update the todo list in the todo.md (do not remove any tasks, just update their status)
  4.4. When I say invent, please implement a tool in the tools/ directory and write a tool description in .cursorrules file. Run it.
  4.5. When I say plan, please plan for the app or change and update all needed documentation
  4.6. When I say commit, please commit all pending changes using git add . and git commit with descriptive message
  4.7. When I say fix, please fix the the error using process defined in step 3.
  4.8. When I say design, please design the frontend of the application or feature and generate and optimise images for it

Important rules:
- Do not ever create a new project, scan the folders to understand the project structure.

